{"mappings":"ACEA,SAAS,gBAAgB,CAAC,mBAAoB,WAUnC,IAAA,EAAT,WACE,IAAM,EAAW,EAAM,IAAI,CAAC,MAAM,CAC5B,EAAW,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,AAE3C,CAAA,EAAgB,QAAQ,CAAG,GAAY,EACvC,EAAgB,QAAQ,CAAG,GAAY,EACvC,EAAmB,QAAQ,CAAG,GAAY,EAC1C,EAAmB,QAAQ,CAAG,GAAY,CAC5C,EAjBM,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAqB,SAAS,aAAa,CAAC,kBAC5C,EAAqB,SAAS,aAAa,CAAC,kBAC5C,EAAQ,SAAS,aAAa,CAAC,UAE/B,EAAY,GACZ,EAAY,EAYlB,EAAgB,gBAAgB,CAAC,QAAS,WACxC,GAAI,EAAM,IAAI,CAAC,MAAM,CAAG,EAGtB,IAAK,IAFC,EAAS,EAAM,SAAS,GAErB,EAAI,EAAG,EAAI,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAE,IAC9C,EAAO,UAAU,GAGrB,GACF,GAEA,EAAgB,gBAAgB,CAAC,QAAS,WACpC,EAAM,IAAI,CAAC,MAAM,CAAG,GACtB,EAAM,SAAS,CAAC,IAElB,GACF,GAEA,EAAmB,gBAAgB,CAAC,QAAS,WAEpC,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,EADP,GAAI,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAG,EAAjC,GAAA,CACE,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,E,C,M,E,CADX,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIP,GACF,GAEA,EAAmB,gBAAgB,CAAC,QAAS,WAEpC,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,EADP,GAAI,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAG,EAAjC,GAAA,CACE,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,CAAC,G,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIP,GACF,GAEA,GACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var updateButtonState = function updateButtonState() {\n        var rowCount = table.rows.length;\n        var colCount = table.rows[0].cells.length;\n        appendRowButton.disabled = rowCount >= MAX_COUNT;\n        removeRowButton.disabled = rowCount <= MIN_COUNT;\n        appendColumnButton.disabled = colCount >= MAX_COUNT;\n        removeColumnButton.disabled = colCount <= MIN_COUNT;\n    };\n    var appendRowButton = document.querySelector(\".append-row\");\n    var removeRowButton = document.querySelector(\".remove-row\");\n    var appendColumnButton = document.querySelector(\".append-column\");\n    var removeColumnButton = document.querySelector(\".remove-column\");\n    var table = document.querySelector(\".field\");\n    var MAX_COUNT = 10;\n    var MIN_COUNT = 2;\n    appendRowButton.addEventListener(\"click\", function() {\n        if (table.rows.length < MAX_COUNT) {\n            var newRow = table.insertRow();\n            for(var i = 0; i < table.rows[0].cells.length; i++)newRow.insertCell();\n        }\n        updateButtonState();\n    });\n    removeRowButton.addEventListener(\"click\", function() {\n        if (table.rows.length > MIN_COUNT) table.deleteRow(-1);\n        updateButtonState();\n    });\n    appendColumnButton.addEventListener(\"click\", function() {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        if (table.rows[0].cells.length < MAX_COUNT) try {\n            for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.insertCell();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtonState();\n    });\n    removeColumnButton.addEventListener(\"click\", function() {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        if (table.rows[0].cells.length > MIN_COUNT) try {\n            for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.deleteCell(-1);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtonState();\n    });\n    updateButtonState();\n});\n\n//# sourceMappingURL=index.0ef5237e.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const appendRowButton = document.querySelector('.append-row');\n  const removeRowButton = document.querySelector('.remove-row');\n  const appendColumnButton = document.querySelector('.append-column');\n  const removeColumnButton = document.querySelector('.remove-column');\n  const table = document.querySelector('.field');\n\n  const MAX_COUNT = 10;\n  const MIN_COUNT = 2;\n\n  function updateButtonState() {\n    const rowCount = table.rows.length;\n    const colCount = table.rows[0].cells.length;\n\n    appendRowButton.disabled = rowCount >= MAX_COUNT;\n    removeRowButton.disabled = rowCount <= MIN_COUNT;\n    appendColumnButton.disabled = colCount >= MAX_COUNT;\n    removeColumnButton.disabled = colCount <= MIN_COUNT;\n  }\n\n  appendRowButton.addEventListener('click', () => {\n    if (table.rows.length < MAX_COUNT) {\n      const newRow = table.insertRow();\n\n      for (let i = 0; i < table.rows[0].cells.length; i++) {\n        newRow.insertCell();\n      }\n    }\n    updateButtonState();\n  });\n\n  removeRowButton.addEventListener('click', () => {\n    if (table.rows.length > MIN_COUNT) {\n      table.deleteRow(-1);\n    }\n    updateButtonState();\n  });\n\n  appendColumnButton.addEventListener('click', () => {\n    if (table.rows[0].cells.length < MAX_COUNT) {\n      for (const row of table.rows) {\n        row.insertCell();\n      }\n    }\n    updateButtonState();\n  });\n\n  removeColumnButton.addEventListener('click', () => {\n    if (table.rows[0].cells.length > MIN_COUNT) {\n      for (const row of table.rows) {\n        row.deleteCell(-1);\n      }\n    }\n    updateButtonState();\n  });\n\n  updateButtonState();\n});\n"],"names":["document","addEventListener","updateButtonState","rowCount","table","rows","length","colCount","cells","appendRowButton","disabled","MAX_COUNT","removeRowButton","MIN_COUNT","appendColumnButton","removeColumnButton","querySelector","newRow","insertRow","i","insertCell","deleteRow","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","deleteCell"],"version":3,"file":"index.0ef5237e.js.map"}